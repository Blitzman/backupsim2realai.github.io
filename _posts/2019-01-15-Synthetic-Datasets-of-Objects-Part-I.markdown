---
layout: post
title: "Part I: Cataloguing Datasets of 3D Objects"
date: 2019-01-15 13:32:20 +0100
description: Cataloguing datasets of object models # Add post description (optional)
img:  # Add image post (optional)
---

Desirable properties for any object dataset

-  Large size
-  Variation 
-  Diversity 
-  Parametric representation 
-  High Entropy (balance in the classes) 

### Data formats

#### CAD models

[![](/assets/img/2019-01-15/The-history-of-CAD_CADENAS_R3.jpg)](/assets/img/2019-01-15/The-history-of-CAD_CADENAS_R3.jpg){:width="70%"}
Credits: https://partsolutions.com/wp-content/uploads/2017/09/The-history-of-CAD_CADENAS_R3.png

#### STL format
The format only describes the 3D surface geometry of the object *i.e.* information about 3D vertices and normals is provided and no information of colour, texture or other possible meta-data relevant for the model is included. These files are usually generated by a CAD program and are most commonly used in the 3D printing. They store the 3D information using a concept called "tessellation" where a primitive shape (*e.g.* a triangle described by three vertices and a normal) is repeated across to encode the surface geometry without overlaps and gaps. The format was invented by the _Albert Consulting Group_ for [3D systems](https://en.wikipedia.org/wiki/3D_Systems), a company co-founded by [Chuck Hull](https://en.wikipedia.org/wiki/Chuck_Hull), in 1987. Chuck had then invented stereolithographic 3D printer and his company were looking for a way to transfer the information from 3D CAD models to the printer and realised they could use the concept of "tessellation" to describe the geometry. For instance, the image below shows different levels of tessellation of sphere done with a triangle. 

<center><img src="/assets/img/2019-01-15/mesh_stl.jpg" width="70%"></center>

STL files come in two different flavours namely ASCII and Binary. The ASCII format starts with the word "solid" in lower case and the last line should be the keyword "endsolid". The lines between the above contain descriptions of 3 vertex facets including their normals, the ordering of the vertices should comply with the right hand rule. A sample ASCII STL file looks like the following\: 

```
solid
   :
   facet normal 0.0 0.0 1.0 
   outer loop 
      vertex  1.0  1.0  0.0 
      vertex -1.0  1.0  0.0 
      vertex  0.0 -1.0  0.0 
   endloop
   endfacet
   :
endsolid
```


Often the normals need not be provided and they will be generated by the parsing software/system. The main restriction placed upon the facets in STL files is that all adjacent facets must share two common vertices. 


<center><img src="/assets/img/2019-01-15/stl1.jpg" width="50%"></center>

#### OBJ format 

The OBJ format was created by [Wavefront Technologies](https://en.wikipedia.org/wiki/Wavefront_Technologies) to store lines, polygons, and free-form curves and objects. Similar to STL it also stores the surface geometry but unlike STL it also stores the colour and texture information. Although STL remains the most popular format for 3D printing, the size of the file very quickly increases for high-resolution 3D models and the lack of colour information makes it somewhat restrictive. OBJ format can approximate surface geometry without blowing up the size of the model using bezier curves or NURBS. There are multiple ways to store the geometry with OBJ format. In its simplest form, OBJ allows tessellation of the geometry in the form of triangles, quadrilaterals or more complext polygons. The vertices and normals of the polygons are stored to encode the geometry. Other ways to encode geometry with OBJ include free-form curves like bezier curves and free-form surfaces like NURBS. Free-form surfaces are more precise and they lead to smaller file sizes at higher precision compared to other methods. 

OBJ format also supports colour and texture in an accompanying file with `.MTL` extension which allows the end-user to render a multi-coloured textured model.   

<center><img src="/assets/img/2019-01-15/texture_map.jpg" width="70%"></center>


https://all3dp.com/1/obj-file-format-3d-printing-cad/

### Synthetic Datasets

|           Dataset          | Year |    Articulations   |                                Source Link                               |
|:--------------------------:|:----:|:------------------:|:------------------------------------------------------------------------:|
|   NTU 3D Model  Benchmark  | 2003 |         :x:        |                        http://3d.csie.ntu.edu.tw/                        |
|  Mesh Deformation Dataset  | 2004 |         :x:        |     http://people.csail.mit.edu/sumner/research/deftransfer/data.html    |
|         PrincetonSB        | 2004 |         :x:        |                 http://shape.cs.princeton.edu/benchmark/                 |
| AIM@SHAPE shape Repository | 2006 |         :x:        |      http://visionair.ge.imati.cnr.it/ontologies/shapes/releases.jsp     |
|  McGill 3D Shape Benchmark | 2008 |         :x:        |                http://www.cim.mcgill.ca/~shape/benchMark/                |
|          SHREC' 08         | 2008 |         :x:        |              https://engineering.purdue.edu/PRECISE/shrec08              |
|   Columbia Grasp Database  | 2009 |         :x:        |                     http://grasping.cs.columbia.edu/                     |
|          SHREC' 10         | 2010 |         :x:        |       http://tosca.cs.technion.ac.il/book/shrec_robustness2010.html      |
|  Toyohashi Shape Benchmark | 2012 |         :x:        |                http://www.kde.cs.tut.ac.jp/benchmark/tsb/                |
|            IKEA            | 2013 |         :x:        |                        http://ikea.csail.mit.edu/                        |
|          PASCAL3D+         | 2014 |         :x:        |              http://cvgl.stanford.edu/projects/pascal3d.html             |
|            CAPOD           | 2014 |         :x:        |           https://sites.google.com/site/pgpapadakis/home/CAPOD           |
|          ModelNet          | 2015 |         :x:        |                     http://modelnet.cs.princeton.edu/                    |
|            NIST            | 2016 | :heavy_check_mark: | https://catalog.data.gov/dataset/nist-cad-models-and-step-files-with-pmi |
|          Thingi10K         | 2016 |         :x:        |                 https://ten-thousand-models.appspot.com/                 |
|         ObjectNet3D        | 2016 |         :x:        |              http://cvgl.stanford.edu/projects/objectnet3d/              |
|          ShapeNet          | 2016 |         :x:        |                         https://www.shapenet.org/                        |
|           PartNet          | 2018 | :heavy_check_mark: |                 https://cs.stanford.edu/~kaichun/partnet/                |
|             ABC            | 2018 | :heavy_check_mark: |                   https://arxiv.org/pdf/1812.06216.pdf                   |

Talk about DexNet: https://berkeleyautomation.github.io/dex-net/

CAPOD dataset: https://sites.google.com/site/pgpapadakis/home/CAPOD

<center><img src="/assets/img/2019-01-15/object_datasets.jpg" width="640"></center>

### Real World Datasets

|        Dataset       | Year |    Articulations   |                          Source Link                          |
|:--------------------:|:----:|:------------------:|:-------------------------------------------------------------:|
|         B3DO         | 2011 |         :x:        |                     http://kinectdata.com/                    |
| RGB-D Object Dataset | 2011 |         :x:        |        http://rgbd-dataset.cs.washington.edu/index.html       |
|          KIT         | 2012 |         :x:        | https://journals.sagepub.com/doi/abs/10.1177/0278364912445831 |
|        BigBird       | 2014 |         :x:        |                http://rll.berkeley.edu/bigbird/               |
|          YCB         | 2015 |         :x:        |                 http://www.ycbbenchmarks.com/                 |
|        3DScan        | 2016 |         :x:        |                http://redwood-data.org/3dscan/                |
|        T-LESS        | 2017 |         :x:        |                http://cmp.felk.cvut.cz/t-less/                |
|          RBO         | 2018 | :heavy_check_mark: |         https://tu-rbo.github.io/articulated-objects/         |


<center><img src="/assets/img/2019-01-15/book_cabinet_rubiks.gif" height="200"></center>

More datasets in the table here https://arxiv.org/pdf/1502.03143.pdf


> For physics simulation, articulations in the form of hinges and joints as well as collisions shapes of objects in the form of bounding volumes etc. are important.

Collision Shapes: https://www.toptal.com/game/video-game-physics-part-ii-collision-detection-for-solid-objects


STL format explanation https://all3dp.com/what-is-stl-file-format-extension-3d-printing/

#### Authors 
Ankur Handa and Miles Brundage
